# -*- coding: utf-8 -*-
"""PA1_555.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TALbQSeYTaKjRbiLgYJEM_QWC36vqtog
"""

import socket
import random
import binascii
import time
import sys

def dec_to_hex(n,size=0):
  '''This function takes an decimal number as input and converts it into hexadeciaml with specified
  number of digits'''
  return '{0:X}'.format(n).zfill(size)

def generateQName(name):
  '''This function takes the hostname as input, generates and returns a QNAME field'''
  labels = name.split('.')
  qname = ''
  for i in labels:
    qname = qname + ' ' + str(dec_to_hex(len(i),2))
    for j in i:
      qname = qname + ' ' + dec_to_hex(ord(j),2)
  qname += ' 00'

  return qname

def constructHeader():
  ''' This function creates and returns a header section for the DNS query in the specified format
  initializing only required fields for query and setting other fields to 0'''
  header = ''
  id = dec_to_hex(random.randint(0,65535),4)
  flags = ' 01 00' #QR=1 opcode=0000 AA=0 TC=0 RD=1 RA=0 Z=000 RCode=0000 for query
  qdcount = ' 00 01' #QDCOUNT=1 only one question
  nscount = arcount = ancount = ' 00 00' #ANCOUNT, NSCOUNT, ARCOUNT =0 for query
  header = id + flags + qdcount + nscount + arcount + ancount
  return header

def constructQuestion(name):
  '''This function ues the hostname creates and returns a question section for the DNS query'''
  qname = generateQName(name)
  qtype = qclass = dec_to_hex(1,4) #QTYPE=1 As we are looking for A records QCLASS=1 as we are looking up in internet
  question = qname + qtype + qclass
  return question

def constructQuery(hostname):
  '''This function constructs and returns the query for the DNS server'''
  print('Preparing DNS query')
  header = constructHeader() #construct header
  question = constructQuestion(hostname) #construct question
  query = header + question
  return query

def sendQuery(query):
    '''This function creates a UDP socket for 8.8.8.8:53 and queries it
    The function tries for 3 times until the responce is recieved with a gap of 5 seconds between each try
    '''
    address = '8.8.8.8'
    port = 53
    max_retries = 3
    timeout = 5

    query = query.replace(" ", "").replace("\n", "")

    server_address = (address, port)
    print("Contacting DNS server")

    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

    for retry in range(max_retries):
        try:
            sock.settimeout(timeout)
            print(f'Sending DNS query: attempt {retry + 1}/3')
            sock.sendto(binascii.unhexlify(query), server_address)
            data, _ = sock.recvfrom(4096)
            print(f'Responce recieved: attempt {retry + 1}/3')
            sock.close()
            print("Processing DNS responce")
            print('------------------------------------------------------------------------------------------------')
            return binascii.hexlify(data).decode("utf-8")
        except socket.timeout:
            print(f"Timeout on attempt {retry + 1}. Retrying...")
            time.sleep(timeout)


    print(f"Error: Maximum retries ({max_retries}) reached. No response received.")
    return None

def format_responce(responce):
  """format_responce converts the reponce into a list of octets"""
  # Using list comprehension to create a list of two-character elements
  result_list = [responce[i:i+2] for i in range(0, len(responce), 2)]
  return result_list

def genName(responce):
 #print(responce)
  name = ''
  while(responce[0] != '00'):
    for i in range(int(responce.pop(0),16)):
      name += chr(int(responce.pop(0),16))
    name += '.'
  name = name[:-1]
  responce.pop(0)
  return responce, name

def resourceRecord(responce, count, name):
  #print(responce)
  count = int(count.replace(" ",''),16)
  for _ in range(count):
    if (bin(int(responce[0],16))[2:][:2] == '11'):
      responce.pop(0)
      responce.pop(0)
      print(f'answer.NAME = {name}')
    else:
      responce, name = genName(responce)
      print(f'answer.NAME = {name}')

    print(f'answer.TYPE = {responce.pop(0)} {responce.pop(0)}')
    print(f'answer.CLASS = {responce.pop(0)} {responce.pop(0)}')
    print(f'answer.TTL = {responce.pop(0)} {responce.pop(0)} {responce.pop(0)} {responce.pop(0)}')
    print(f'answer.RDLENGTH = {responce.pop(0)} {responce.pop(0)}')
    print(f'answer.RDDATA = {int(responce.pop(0),16)}.{int(responce.pop(0),16)}.{int(responce.pop(0),16)}.{int(responce.pop(0),16)}')

  return responce

def processResponce(responce):
  '''This function takes the list of octets from the responce and prints in the specified
  output format'''
  #header fields
  header_id = responce.pop(0) + ' ' +responce.pop(0)
  print(f'header.ID = {header_id}')

  header_flags = responce.pop(0) + responce.pop(0)
  header_flags = list(bin(int(header_flags, 16))[2:].zfill(16))
  print(f'header.QR = {header_flags.pop(0)}')
  print(f'header.OPCODE = {header_flags.pop(0)}{header_flags.pop(0)}{header_flags.pop(0)}{header_flags.pop(0)}')
  print(f'header.AA = {header_flags.pop(0)}')
  print(f'header.TC = {header_flags.pop(0)}')
  print(f'header.RD = {header_flags.pop(0)}')
  print(f'header.RA = {header_flags.pop(0)}')
  print(f'header.Z = {header_flags.pop(0)}{header_flags.pop(0)}{header_flags.pop(0)}')
  print(f'header.RCODE = {header_flags.pop(0)}{header_flags.pop(0)}{header_flags.pop(0)}{header_flags.pop(0)}')

  header_qcount = responce.pop(0) + ' ' +responce.pop(0)
  print(f'header.QCOUNT = {header_qcount}')

  header_acount = responce.pop(0) + ' ' +responce.pop(0)
  print(f'header.ACOUNT = {header_acount}')

  header_nscount = responce.pop(0) + ' ' +responce.pop(0)
  print(f'header.NSCOUNT = {header_nscount}')

  header_arcount = responce.pop(0) + ' ' +responce.pop(0)
  print(f'header.ARCOUNT = {header_arcount}')

  #question section
  domain_name = None
  responce, name = genName(responce)
  domain_name = name
  print(f'question.QNAME = {name}')
  print(f'question.QTYPE = {responce.pop(0)} {responce.pop(0)}')
  print(f'question.QCLASS = {responce.pop(0)} {responce.pop(0)}')

  #print(responce)

  #answer section
  responce = resourceRecord(responce, header_acount, domain_name)

  #authorative records
  responce = resourceRecord(responce, header_nscount, domain_name)

  #additional records
  responce = resourceRecord(responce, header_arcount, domain_name)

  print("-----------------------------------------------------------------------------------------------------")

hostname = sys.argv[1]
query = constructQuery(hostname)
responce = format_responce(sendQuery(query))
processResponce(responce)
#print(responce)